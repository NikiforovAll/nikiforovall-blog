<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Jibber-jabbering about programming and IT.</title>
		<description>Blog</description>
		<link>/</link>
		<atom:link href="/" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Design Patterns. Creational Patterns. Part II.</title>
				<description>
</description>
				<pubDate>Mon, 03 Jun 2019 00:00:00 +0300</pubDate>
				<link>/general/2019/06/03/design-patterns-second-part.html</link>
				<guid isPermaLink="true">/general/2019/06/03/design-patterns-second-part.html</guid>
			</item>
		
			<item>
				<title>Design Patterns. Behavioral Patterns. Part I.</title>
				<description>&lt;p&gt;Yes, you might say that blogging about design patterns is boring and dull. And you are probably right. But what about version with live examples?&lt;/p&gt;

&lt;h1&gt; TOC &lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#strategy&quot;&gt;Strategy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#template-method&quot;&gt;Template Method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#visitor&quot;&gt;Visitor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#state&quot;&gt;State&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mediator&quot;&gt;Mediator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#observer&quot;&gt;Observer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#memento&quot;&gt;Memento&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iterator&quot;&gt;Iterator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interpreter&quot;&gt;Interpreter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#command&quot;&gt;Command&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#chainofresponsibility&quot;&gt;ChainOfResponsibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategy&quot;&gt;Strategy&lt;/h2&gt;

&lt;p&gt;Defines a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. Strategy adapts behavior at runtime to requirements that are not known in advance.&lt;/p&gt;

&lt;p&gt;In general case Pattern Strategy doesn’t restrict the number of operations in defined interface. So it could be one operation (&lt;em&gt;Sort&lt;/em&gt; in &lt;em&gt;ISortable&lt;/em&gt;) or family of operations (&lt;em&gt;Encode/Decode&lt;/em&gt; in &lt;em&gt;IMessageProcessor&lt;/em&gt;). In case when it is one operation, it is possible to use .NET specific implementation that relies on delegate Funct&amp;lt;T1, T2,…&amp;gt; or Action&amp;lt;T1, T2,…&amp;gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you want to encapsulate some behavior or part of algorithm.&lt;/li&gt;
  &lt;li&gt;When you want to change behavior of runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tradeoff:&lt;/strong&gt; Flexibility vs complexity&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frequency of use:&lt;/strong&gt; High&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diagram&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/design-patterns/strategy-1.png&quot; alt=&quot;strategy-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples in .NET&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Many extension methods in LINQ accepts strategy methods. For example &lt;em&gt;IComparer&amp;lt;T&amp;gt;&lt;/em&gt; or &lt;em&gt;IEqualityComparer&amp;lt;T&amp;gt;&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;WCF contains a lot of examples of strategy pattern: &lt;em&gt;IErrorHandler&lt;/em&gt;, &lt;em&gt;IDispatchMessageFormatter&lt;/em&gt;, &lt;em&gt;MessageFilter&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Strategy&quot;&gt;Strategy&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;script src=&quot;https://gist.github.com/NikiforovAll/5054b18c0d8710d9ed9b888d5c0c76ff.js&quot;&gt;&lt;/script&gt; --&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=5054b18c0d8710d9ed9b888d5c0c76ff&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ILogReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// log storage number one&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LogFileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logEntryList1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logEntryList1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LogFileReader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logEntryList1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// log storage number two&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WindowsEventLogReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logEntryList2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logEntryList2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WindowsEventLogReader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logEntryList2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TestRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=5054b18c0d8710d9ed9b888d5c0c76ff&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;template-method&quot;&gt;Template Method&lt;/h2&gt;

&lt;p&gt;Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure. It is possible to use .NET specific implementation that relies on extension methods and namespaces. So template method is defined by public extension methods, implementation is determined by compile-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frequency of use:&lt;/strong&gt; Medium&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diagram&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/design-patterns/template-method-1.png&quot; alt=&quot;strategy-diagram&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/TemplateMethod&quot;&gt;Template Method&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=07a88aff3888b777015a574eb067960f&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// define behavior via subclassing&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AbstractClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConcreteProcessor1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConcreteProcessor2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TestRunner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;visitor&quot;&gt;Visitor&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Visitor&quot;&gt;Visitor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/State&quot;&gt;State&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;mediator&quot;&gt;Mediator&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Mediator&quot;&gt;Mediator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;observer&quot;&gt;Observer&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Observer&quot;&gt;Observer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;memento&quot;&gt;Memento&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Memento&quot;&gt;Memento&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;iterator&quot;&gt;Iterator&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Iterator&quot;&gt;Iterator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;interpreter&quot;&gt;Interpreter&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Interpreter&quot;&gt;Interpreter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;command&quot;&gt;Command&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/Command&quot;&gt;Command&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;chainofresponsibility&quot;&gt;ChainOfResponsibility&lt;/h2&gt;

&lt;p&gt;Frequency of use:&lt;/p&gt;

&lt;p&gt;Source code: &lt;a href=&quot;https://github.com/NikiforovAll/design-patterns-playground/tree/master/ChainOfResponsibility&quot;&gt;ChainOfResponsibility&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&quot;https://try.dot.net/?fromGist=&quot;&gt;Try .NET&lt;/a&gt;&lt;/p&gt;

&lt;!-- &lt;iframe src=&quot;https://try.dot.net/?fromGist=&quot; markdown = &quot;0&quot;&gt;&lt;/iframe&gt; --&gt;
</description>
				<pubDate>Mon, 03 Jun 2019 00:00:00 +0300</pubDate>
				<link>/general/2019/06/03/design-patterns-first-part.html</link>
				<guid isPermaLink="true">/general/2019/06/03/design-patterns-first-part.html</guid>
			</item>
		
	</channel>
</rss>
